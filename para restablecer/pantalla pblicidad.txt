package com.wilsoft.arki_streamconfig

// Importaciones de Jetpack Compose para UI
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.clickable
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.sp
//import androidx.compose.ui.graphics.Color
//import androidx.navigation.NavController

// Importaciones de corutinas para manejar operaciones asíncronas
//import kotlinx.coroutines.launch
//import kotlinx.coroutines.CoroutineScope

// Importaciones de Firebase para cargar datos y subir archivos
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.storage.FirebaseStorage

// Para mostrar imágenes si usas Coil
//import coil.compose.rememberImagePainter

// Importa las clases para los íconos de Material Design
import androidx.compose.material.icons.Icons  // Importa la clase Icons
import androidx.compose.material.icons.filled.*  // Importa los íconos rellenos (Edit, Delete, Add, etc.)

import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import android.net.Uri
//import android.content.Intent
import java.util.UUID

//onDataChange y onCancelled
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError


import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.unit.dp


//fun PantallaPublicidad(
//    firebaseRepository: FirebaseRepository,  // Repositorio de Firebase para cargar perfiles y publicidades
//    navController: NavController,  // Controlador de navegación
//    scope: CoroutineScope = rememberCoroutineScope()  // Alcance de las corutinas
//) {
//}


// Comienza la función principal de la pantalla de publicidad
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaPublicidad(
firebaseRepository: FirebaseRepository  // Eliminar scope si no lo necesitas
) {
    // Variables de estado
    var selectedProfile by remember { mutableStateOf("") }  // Almacena el perfil seleccionado
    var perfilesList by remember { mutableStateOf(listOf<String>()) }  // Lista de perfiles cargada desde Firebase
    var publicidadesList by remember { mutableStateOf(listOf<String>()) }  // Lista de publicidades asociadas al perfil
    var selectedPublicidad by remember { mutableStateOf("") }  // Publicidad seleccionada
    var nombrePublicidad by remember { mutableStateOf("") }  // Nombre de la publicidad (nuevo o editado)
    var imageUrl by remember { mutableStateOf("") }  // URL de la imagen publicitaria
    var fechaInicial by remember { mutableStateOf("") }  // Fecha inicial seleccionada
    var fechaFinal by remember { mutableStateOf("") }  // Fecha final seleccionada
    var guionPublicidad by remember { mutableStateOf("") }  // Guion de la publicidad
    var isEditing by remember { mutableStateOf(false) }  // Controla si estamos en modo edición o nuevo
    var imageUri by remember { mutableStateOf<Uri?>(null) }  // Declarar variable para la URI de la imagen seleccionada

    val snackbarHostState = remember { SnackbarHostState() }

    //INICIA BLOQUE DE CARGA DE PERFILES
    // Cargar los perfiles desde Firebase cuando se inicia la pantalla
    LaunchedEffect(Unit) {
        firebaseRepository.loadProfiles(onSuccess = { perfiles ->
            perfilesList = perfiles  // Almacenar la lista de perfiles
        }, onFailure = { exception ->
            println("Error cargando perfiles: ${exception.message}")
        })
    }
    //FIN DEL BLOQUE DE CARGA DE PERFILES




    // Comienza la UI
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())  // Habilitar scroll vertical para pantallas pequeñas
            .padding(16.dp)
    ) {

// INICIA BLOQUE DE SELECCIÓN DE PERFIL
        var expanded by remember { mutableStateOf(false) }  // Controla si el menú está expandido

        ExposedDropdownMenuBox(
            expanded = expanded,
            onExpandedChange = { expanded = !expanded }  // Alternar el menú desplegable
        ) {
            TextField(
                value = selectedProfile,  // Muestra el perfil seleccionado
                onValueChange = {},
                readOnly = true,
                label = { Text("Seleccionar perfil") },
                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor()  // Ancla para el menú desplegable
            )

            ExposedDropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false }  // Cerrar el menú cuando se hace clic afuera
            ) {
                perfilesList.forEach { perfil ->
                    DropdownMenuItem(
                        text = { Text(perfil) },
                        onClick = {
                            selectedProfile = perfil  // Actualizar el perfil seleccionado
                            expanded = false  // Cerrar el menú
                            // INICIA BLOQUE DE CARGA DE PUBLICIDADES DEL PERFIL
                            loadPublicidadesForProfile(
                                profile = perfil,
                                onSuccess = { publicidades ->
                                    publicidadesList = publicidades  // Actualiza la lista de publicidades
                                },
                                onFailure = { exception ->
                                    println("Error cargando publicidades: ${exception.message}")
                                }
                            )
                            // FIN DEL BLOQUE DE CARGA DE PUBLICIDADES DEL PERFIL
                        }
                    )
                }
            }
        }
// FIN DEL BLOQUE DE SELECCIÓN DE PERFIL

        // Agregar aquí el código del botón "Crear nueva publicidad"
        if (selectedProfile.isNotEmpty()) {
            Button(onClick = {
                // Limpiar los campos para una nueva publicidad
                nombrePublicidad = ""
                imageUrl = ""
                fechaInicial = ""
                fechaFinal = ""
                guionPublicidad = ""
                isEditing = true  // Cambiar a modo creación de nueva publicidad
            }) {
                Icon(Icons.Default.Add, contentDescription = "Nueva publicidad")
                Spacer(modifier = Modifier.width(8.dp))
                Text("Crear nueva publicidad")
            }

            Spacer(modifier = Modifier.height(16.dp))
        }
// FIN DEL BOTÓN "CREAR NUEVA PUBLICIDAD"

        Spacer(modifier = Modifier.height(16.dp))

        // Mostrar botones de acción si hay una publicidad seleccionada
        if (selectedPublicidad.isNotEmpty()) {
            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                //INICIA BLOQUE BOTÓN EDITAR
                Button(onClick = {
                    isEditing = true  // Cambiar a modo edición
                }) {
                    Icon(Icons.Default.Edit, contentDescription = "Editar publicidad")
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Editar publicidad")
                }
                //FIN DEL BLOQUE BOTÓN EDITAR

                //INICIA BLOQUE BOTÓN ELIMINAR
                Button(onClick = {
                    // Eliminar la publicidad seleccionada
                    deletePublicidad(
                        profile = selectedProfile,
                        publicidad = selectedPublicidad,
                        onSuccess = {
                            println("Publicidad eliminada exitosamente")
                            publicidadesList = publicidadesList.filter { it != selectedPublicidad }
                            selectedPublicidad = ""  // Limpiar la selección
                        },
                        onFailure = { exception ->
                            println("Error eliminando publicidad: ${exception.message}")
                        }
                    )
                }) {
                    Icon(Icons.Default.Delete, contentDescription = "Eliminar publicidad")
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Eliminar publicidad")
                }
                //FIN DEL BLOQUE BOTÓN ELIMINAR
            }
        }


        //INICIA BLOQUE DE FORMULARIO DE PUBLICIDAD
        if (isEditing || nombrePublicidad.isNotEmpty()) {
            // Campo de texto para el nombre de la publicidad
            Text("Nombre de la publicidad")
            TextField(
                value = nombrePublicidad,
                onValueChange = { nombrePublicidad = it },  // Vinculado a la variable nombrePublicidad
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(16.dp))

            //INICIA BLOQUE DE SELECCIÓN DE IMAGEN
            // Botón para seleccionar una imagen desde el dispositivo (luego subirla a GitHub o Firebase)
            Button(onClick = {
                // Aquí puedes seleccionar la función: subir a GitHub o Firebase Storage
                if (imageUri != null) {
                    uploadImageToFirebase(
                        imageUri = imageUri!!,  // Ya verificamos que no es nulo
                        onSuccess = { url ->
                            imageUrl = url
                            println("Imagen subida exitosamente: $url")
                        },
                        onFailure = { exception ->
                            println("Error al subir la imagen: ${exception.message}")
                        }
                    )
                } else {
                    println("Error: No se ha seleccionado ninguna imagen")
                }
            }) {
                Text("Seleccionar imagen")
            }

            // Mostrar la URL de la imagen seleccionada/subida
            TextField(
                value = imageUrl,
                onValueChange = { imageUrl = it },  // Vinculado a la variable imageUrl
                modifier = Modifier.fillMaxWidth(),
                label = { Text("URL de la imagen") }
            )
            //FIN DEL BLOQUE DE SELECCIÓN DE IMAGEN

            Spacer(modifier = Modifier.height(16.dp))

            //INICIA BLOQUE DE FECHA INICIAL Y FINAL
            // Campos para las fechas
            Text("Fecha inicial")
            TextField(
                value = fechaInicial,
                onValueChange = { fechaInicial = it },
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text("Fecha final")
            TextField(
                value = fechaFinal,
                onValueChange = { fechaFinal = it },
                modifier = Modifier.fillMaxWidth()
            )
            //FIN DEL BLOQUE DE FECHA INICIAL Y FINAL

            Spacer(modifier = Modifier.height(16.dp))

            //INICIA BLOQUE DE GUIÓN PUBLICITARIO
            // Campo de texto para el guion de la publicidad
            Text("Guion de la publicidad")
            TextField(
                value = guionPublicidad,
                onValueChange = { guionPublicidad = it },
                modifier = Modifier.fillMaxWidth(),
                textStyle = TextStyle(fontSize = 16.sp),
                maxLines = 5
            )
            //FIN DEL BLOQUE DE GUIÓN PUBLICITARIO

            Spacer(modifier = Modifier.height(16.dp))

            // INICIA BLOQUE BOTONES "CANCELAR" Y "GUARDAR"
            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {

                // Botón "Cancelar" a la izquierda
                Button(
                    onClick = {
                        // Cancelar la operación y limpiar los campos
                        nombrePublicidad = ""
                        imageUrl = ""
                        fechaInicial = ""
                        fechaFinal = ""
                        guionPublicidad = ""
                        isEditing = false
                        selectedPublicidad = ""
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Close, contentDescription = "Cancelar")
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Cancelar")
                }

                Spacer(modifier = Modifier.width(16.dp))  // Espaciado entre botones

                // Botón "Guardar" a la derecha
                Button(
                    onClick = {
                        // Guardar o actualizar la publicidad en Firebase
                        savePublicidad(
                            profile = selectedProfile,
                            nombre = nombrePublicidad,
                            imageUrl = imageUrl.takeIf { it.isNotEmpty() },  // Solo si no está vacío
                            fechaInicial = fechaInicial.takeIf { it.isNotEmpty() },
                            fechaFinal = fechaFinal.takeIf { it.isNotEmpty() },
                            guion = guionPublicidad.takeIf { it.isNotEmpty() },
                            onSuccess = {
                                println("Publicidad guardada exitosamente")

                                // Limpiar los campos del formulario
                                nombrePublicidad = ""
                                imageUrl = ""
                                fechaInicial = ""
                                fechaFinal = ""
                                guionPublicidad = ""

                                // Ocultar el formulario (modo creación o edición)
                                isEditing = false
                                selectedPublicidad = ""

                                // Recargar las publicidades del perfil seleccionado
                                loadPublicidadesForProfile(
                                    profile = selectedProfile,
                                    onSuccess = { publicidades ->
                                        publicidadesList = publicidades  // Actualiza la lista de publicidades
                                    },
                                    onFailure = { exception ->
                                        println("Error recargando publicidades: ${exception.message}")
                                    }
                                )
                            },
                            onFailure = { exception ->
                                println("Error guardando publicidad: ${exception.message}")
                            }
                        )
                    },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Save, contentDescription = "Guardar")
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Guardar")
                }
            }
// FIN DEL BLOQUE BOTONES "CANCELAR" Y "GUARDAR"

        }
        //FIN DEL BLOQUE DE FORMULARIO DE PUBLICIDAD


    }



    // Snackbar para mostrar mensajes de éxito o error
    SnackbarHost(hostState = snackbarHostState)
}
// Fin de la función PantallaPublicidad


// Función para cargar las publicidades asociadas a un perfil desde Firebase
fun loadPublicidadesForProfile(
    profile: String,  // Nombre del perfil seleccionado
    onSuccess: (List<String>) -> Unit,  // Callback de éxito que recibe la lista de publicidades
    onFailure: (Exception) -> Unit  // Callback en caso de fallo
) {
    // Referencia a la ruta de Firebase donde se encuentran las publicidades del perfil seleccionado
    val publicidadesRef = FirebaseDatabase.getInstance().reference
        .child("CLAVE_STREAM_FB")
        .child("PUBLICIDADES")
        .child(profile)  // Accedemos a la clave del perfil

    // Escuchar los datos de Firebase (solo una vez, no para actualizaciones en tiempo real)
    publicidadesRef.addListenerForSingleValueEvent(object : ValueEventListener {
        override fun onDataChange(snapshot: DataSnapshot) {
            if (snapshot.exists()) {
                val publicidadesList = mutableListOf<String>()  // Lista temporal para almacenar los nombres de las publicidades

                // Recorrer todos los hijos (subclaves) de la referencia de publicidades
                for (publicidadSnapshot in snapshot.children) {
                    // Extraer el nombre de la publicidad desde la subclave "nombre"
                    val nombrePublicidad = publicidadSnapshot.child("nombre").getValue(String::class.java)
                    if (nombrePublicidad != null) {
                        publicidadesList.add(nombrePublicidad)  // Agregar el nombre a la lista
                    }
                }

                if (publicidadesList.isEmpty()) {
                    println("No hay publicidades en el perfil seleccionado")
                }

                // Llamar al callback de éxito con la lista de publicidades
                onSuccess(publicidadesList)
            } else {
                // Si el snapshot no existe, eso significa que la clave no existe o no hay datos
                println("La clave 'PUBLICIDADES' no existe para este perfil.")
                onSuccess(emptyList())  // Retornar una lista vacía
            }
        }

        override fun onCancelled(error: DatabaseError) {
            // Llamar al callback de error en caso de fallo
            onFailure(Exception(error.message))
        }
    })
}



// Función para cargar los datos de una publicidad específica desde Firebase
fun loadPublicidadData(
    profile: String,  // Nombre del perfil seleccionado
    publicidad: String,  // Nombre de la publicidad seleccionada
    onSuccess: (Map<String, Any>) -> Unit,  // Callback de éxito que recibe los datos de la publicidad
    onFailure: (Exception) -> Unit  // Callback en caso de fallo
) {
    // Referencia a la ruta de Firebase donde se encuentran los datos de la publicidad seleccionada
    val publicidadRef = FirebaseDatabase.getInstance().reference
        .child("CLAVE_STREAM_FB")
        .child("PUBLICIDADES")
        .child(profile)
        .child(publicidad)  // Accedemos a la clave de la publicidad

    // Escuchar los datos de Firebase (solo una vez)
    publicidadRef.addListenerForSingleValueEvent(object : ValueEventListener {
        override fun onDataChange(snapshot: DataSnapshot) {
            if (snapshot.exists()) {
                // Crear un mapa para almacenar los datos de la publicidad
                val publicidadData = mutableMapOf<String, Any>()

                // Extraer los valores de los campos de la publicidad
                val nombrePublicidad = snapshot.child("nombre").getValue(String::class.java)
                val rutaImagen = snapshot.child("ruta").getValue(String::class.java)
                val fechaInicial = snapshot.child("fechaInicial").getValue(String::class.java)
                val fechaFinal = snapshot.child("fechaFinal").getValue(String::class.java)
                val guion = snapshot.child("guion").getValue(String::class.java)

                // Agregar los datos al mapa si no son nulos
                nombrePublicidad?.let { publicidadData["nombre"] = it }
                rutaImagen?.let { publicidadData["ruta"] = it }
                fechaInicial?.let { publicidadData["fechaInicial"] = it }
                fechaFinal?.let { publicidadData["fechaFinal"] = it }
                guion?.let { publicidadData["guion"] = it }

                // Llamar al callback de éxito con los datos de la publicidad
                onSuccess(publicidadData)
            } else {
                // Manejo cuando la publicidad no existe
                println("La publicidad '$publicidad' no existe para el perfil '$profile'")
                onFailure(Exception("La publicidad '$publicidad' no existe"))
            }
        }

        override fun onCancelled(error: DatabaseError) {
            // Llamar al callback de error en caso de fallo
            onFailure(Exception(error.message))
        }
    })
}


fun deletePublicidad(
    profile: String,  // Nombre del perfil seleccionado
    publicidad: String,  // Nombre de la publicidad a eliminar
    onSuccess: () -> Unit,  // Callback en caso de éxito
    onFailure: (Exception) -> Unit  // Callback en caso de fallo
) {
    // Referencia a la ruta de Firebase donde se encuentra la publicidad a eliminar
    val publicidadRef = FirebaseDatabase.getInstance().reference
        .child("CLAVE_STREAM_FB")
        .child("PUBLICIDADES")
        .child(profile)
        .child(publicidad)  // Accedemos a la clave de la publicidad

    // Verificar si la publicidad realmente existe antes de intentar eliminarla
    publicidadRef.addListenerForSingleValueEvent(object : ValueEventListener {
        override fun onDataChange(snapshot: DataSnapshot) {
            if (snapshot.exists()) {
                // Si la publicidad existe, procedemos a eliminarla
                publicidadRef.removeValue().addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        // Si la operación de borrado fue exitosa, llamar al callback de éxito
                        onSuccess()
                    } else {
                        // Si ocurrió un error, llamar al callback de fallo con la excepción
                        task.exception?.let { onFailure(it) }
                    }
                }
            } else {
                // Manejar el caso en que la publicidad no existe
                println("La publicidad '$publicidad' no existe en el perfil '$profile'")
                onFailure(Exception("La publicidad '$publicidad' no existe en el perfil '$profile'"))
            }
        }

        override fun onCancelled(error: DatabaseError) {
            onFailure(Exception(error.message))
        }
    })
}


// Función para subir una imagen a Firebase Storage
fun uploadImageToFirebase(
    imageUri: Uri,  // URI de la imagen seleccionada del dispositivo
    onSuccess: (String) -> Unit,  // Callback en caso de éxito, recibe la URL de la imagen
    onFailure: (Exception) -> Unit  // Callback en caso de fallo
) {
    // Obtener la referencia de Firebase Storage
    val storageRef = FirebaseStorage.getInstance().reference

    // Crear una ruta única para la imagen en Firebase Storage (por ejemplo, usando un UUID)
    val imageRef = storageRef.child("imagenes/publicidad/${UUID.randomUUID()}.jpg")

    // Subir el archivo a Firebase Storage
    imageRef.putFile(imageUri)
        .addOnSuccessListener {
            // Si la subida es exitosa, obtener la URL de descarga
            imageRef.downloadUrl.addOnSuccessListener { uri ->
                // Llamar al callback de éxito con la URL de la imagen
                onSuccess(uri.toString())
            }
        }
        .addOnFailureListener { exception ->
            // Si ocurrió un error, llamar al callback de fallo con la excepción
            onFailure(exception)
        }
}

@Composable
fun SeleccionarImagen() {
    // Estado para guardar la URI de la imagen seleccionada
    var imageUri by remember { mutableStateOf<Uri?>(null) }

    // Configurar el lanzador para abrir el selector de archivos
    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        imageUri = uri  // Guardar la URI de la imagen seleccionada
    }

    // Botón para seleccionar la imagen
    Button(onClick = {
        launcher.launch("image/*")  // Abrir el selector de imágenes
    }) {
        Text("Seleccionar imagen")
    }

    // Si una imagen ha sido seleccionada, mostrar su URI
    imageUri?.let {
        Text("Imagen seleccionada: $it")

        // Aquí llamas a la función uploadImageToFirebase para subir la imagen a Firebase Storage
        uploadImageToFirebase(
            imageUri = it,  // Pasar la URI de la imagen seleccionada
            onSuccess = { url ->
                println("Imagen subida exitosamente: $url")
            },
            onFailure = { exception ->
                println("Error al subir la imagen: ${exception.message}")
            }
        )
    }
}

fun savePublicidad(
    profile: String,  // Nombre del perfil seleccionado
    nombre: String,  // Nombre de la publicidad (obligatorio)
    imageUrl: String?,  // URL de la imagen publicitaria (opcional)
    fechaInicial: String?,  // Fecha inicial de la publicidad (opcional)
    fechaFinal: String?,  // Fecha final de la publicidad (opcional)
    guion: String?,  // Guion o contenido de la publicidad (opcional)
    onSuccess: () -> Unit,  // Callback en caso de éxito
    onFailure: (Exception) -> Unit  // Callback en caso de fallo
) {
    // Verificar que el campo de nombre no esté vacío
    if (profile.isBlank() || nombre.isBlank()) {
        onFailure(Exception("El campo nombre no puede estar vacío"))
        return
    }

    // Si la URL de la imagen, fecha inicial, fecha final o guion están vacíos, guardamos un valor por defecto
    val publicidadData = mapOf(
        "nombre" to nombre,
        "ruta" to (imageUrl ?: ""),  // Guardar una cadena vacía si no se selecciona una imagen
        "fechaInicial" to (fechaInicial ?: ""),  // Guardar una cadena vacía si no se selecciona una fecha inicial
        "fechaFinal" to (fechaFinal ?: ""),  // Guardar una cadena vacía si no se selecciona una fecha final
        "guion" to (guion ?: "")  // Guardar una cadena vacía si no se proporciona un guion
    )

    // Guardar los datos en Firebase
    val publicidadRef = FirebaseDatabase.getInstance().reference
        .child("CLAVE_STREAM_FB")
        .child("PUBLICIDADES")
        .child(profile)
        .child(nombre)

    publicidadRef.setValue(publicidadData)
        .addOnSuccessListener {
            onSuccess()
        }
        .addOnFailureListener { exception ->
            onFailure(exception)
        }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SeleccionPerfil(
    perfilesList: List<String>,
    onProfileSelected: (String) -> Unit
) {
    var expanded by remember { mutableStateOf(false) }  // Controla si el menú está expandido
    var selectedProfile by remember { mutableStateOf("") }  // Almacena el perfil seleccionado

    // Caja de menú desplegable expuesta
    ExposedDropdownMenuBox(
        expanded = expanded,
        onExpandedChange = {
            expanded = !expanded  // Alternar el estado de expansión
        }
    ) {
        // TextField para mostrar el perfil seleccionado
        TextField(
            value = selectedProfile,  // Muestra el perfil seleccionado
            onValueChange = {},
            readOnly = true,  // Solo lectura
            label = { Text("Seleccionar perfil") },
            trailingIcon = {
                ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
            },
            modifier = Modifier
                .fillMaxWidth()
                .menuAnchor()  // Ancla para el menú
        )

        // Menú desplegable con la lista de perfiles
        ExposedDropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false }
        ) {
            perfilesList.forEach { perfil ->
                DropdownMenuItem(
                    text = { Text(perfil) },
                    onClick = {
                        selectedProfile = perfil  // Actualizar el perfil seleccionado
                        expanded = false  // Cerrar el menú
                        onProfileSelected(perfil)  // Llamar la función cuando un perfil es seleccionado
                    }
                )
            }
        }
    }
}